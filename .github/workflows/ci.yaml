# ci.yaml is a GitHub Actions workflow file that defines a CI pipeline for the SRE Challenge project.
name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  code_quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8 (Code Quality Check)
        run: flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics

  docker_build:
    runs-on: ubuntu-latest
    needs: code_quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image with GitHub SHA tag
        run: |
          docker build -t jmuachifi/sre-challenge-argocd:latest -t jmuachifi/sre-challenge-argocd:${{ github.sha }} .
    
  security_check:
      runs-on: ubuntu-20.04
      needs: docker_build
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        # Step 1: Define Docker image tag based on the commit SHA
        - name: Set Docker image tag
          run: echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

        # Step 2: Check if Docker image exists locally
        - name: Check if Docker image exists locally
          id: check_image
          run: |
            if docker image inspect jmuachifi/sre-challenge-argocd:${{ env.IMAGE_TAG }} > /dev/null 2>&1; then
              echo "Image exists."
              echo "image_exists=true" >> $GITHUB_ENV
            else
              echo "Image does not exist."
              echo "image_exists=false" >> $GITHUB_ENV
            fi

        # Step 3: Build Docker image if it does not exist
        - name: Build Docker image if it does not exist
          if: ${{ env.image_exists }} == 'false'
          run: |
            docker build -t jmuachifi/sre-challenge-argocd:${{ env.IMAGE_TAG }} .

        # Step 4: Cache Trivy DB
        - name: Cache Trivy DB
          uses: actions/cache@v3
          with:
            path: ~/.cache/trivy
            key: ${{ runner.os }}-trivy-db

        # Step 5: Run Trivy vulnerability scanner with retries
        - name: Run Trivy vulnerability scanner with retries
          id: trivy-scan
          uses: aquasecurity/trivy-action@0.20.0
          with:
            image-ref: 'jmuachifi/sre-challenge-argocd:${{ env.IMAGE_TAG }}'
            format: 'table'
            exit-code: '1'
            ignore-unfixed: true
            vuln-type: 'os,library'
            severity: 'CRITICAL,HIGH'
          continue-on-error: true  # Continue even if this step fails

        # Step 6: Retry Trivy scan if rate-limited
        - name: Retry Trivy scan if rate-limited
          if: steps.trivy-scan.outcome == 'failure'
          run: |
            echo "Retrying Trivy scan after rate limit..."
            sleep 60
            trivy image --format table --exit-code 1 --ignore-unfixed \
                        --vuln-type os,library --severity CRITICAL,HIGH \
                        jmuachifi/sre-challenge-argocd:${{ env.IMAGE_TAG }}


    
  # docker_publish:
  #   runs-on: ubuntu-latest
  #   needs: security_check
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Log in to Docker Hub
  #       run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

  #     - name: Ensure Docker image exists or build it
  #       run: |
  #         IMAGE_EXISTS=$(docker images -q jmuachifi/sre-challenge-argocd:${{ github.sha }})
  #         if [ -z "$IMAGE_EXISTS" ]; then
  #           echo "Image not found locally, building..."
  #           docker build -t jmuachifi/sre-challenge-argocd:latest -t jmuachifi/sre-challenge-argocd:${{ github.sha }} -f Dockerfile .
  #         else
  #           echo "Image found locally, proceeding with Docker push."
  #         fi

  #     - name: Push Docker image (latest and SHA tag)
  #       run: |
  #         docker push jmuachifi/sre-challenge-argocd:latest
  #         docker push jmuachifi/sre-challenge-argocd:${{ github.sha }}

  #     - name: Remove unused Docker images
  #       run: docker image prune -f
  docker_publish:
    runs-on: ubuntu-latest
    needs: security_check
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Ensure Docker image exists or build it
        run: |
          IMAGE_EXISTS=$(docker images -q jmuachifi/sre-challenge-argocd:${{ github.sha }})
          if [ -z "$IMAGE_EXISTS" ]; then
            echo "Image not found locally, building..."
            docker build -t jmuachifi/sre-challenge-argocd:latest -t jmuachifi/sre-challenge-argocd:${{ github.sha }} -f Dockerfile .
          else
            echo "Image found locally, proceeding with Docker push."
          fi

      - name: Update deployment.yaml with commit SHA
        run: |
          sed -i "s|jmuachifi/sre-challenge-argocd:.*|jmuachifi/sre-challenge-argocd:${{ github.sha }}|" k8s/deployment.yaml

      - name: Push Docker image (latest and SHA tag)
        run: |
          docker push jmuachifi/sre-challenge-argocd:latest
          docker push jmuachifi/sre-challenge-argocd:${{ github.sha }}

      - name: Remove unused Docker images
        run: docker image prune -f
